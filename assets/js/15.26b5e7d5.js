(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{321:function(t,a,e){"use strict";e.r(a);var _=e(2),r=Object(_.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("blockquote",[e("p",[t._v("本文首发于我的博客 - https://spencerwoo.com")])]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("代码如诗。")]),t._v(" "),e("blockquote",[e("p",[t._v("Code is poetry.")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.loli.net/2018/03/11/5aa5201dd7f2e.jpg",alt:""}})]),t._v(" "),e("p",[e("em",[t._v("▲ Vim - the ubiquitous text editor.")])]),t._v(" "),e("p",[t._v("写代码本应该是很享受的事情，我们有极客高效的 Vim，简约美丽的 Sublime Text，从小至最为纯粹的编辑器，到大至包罗万物的 IDE。一个好的、美观的、高效的代码编写环境着实能够提高一个人的写作、创作欲望。试想一个人把 VC 6.0 放在你的面前，黑底白字、没有高亮、没有颜色，有谁会爱上 C / C++？如果有人在 2018 年向你推荐 1998 年的 IDE，那么你觉得这个人的脑子该如何拯救？")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.loli.net/2018/03/11/5aa51aeacc4b0.jpg",alt:""}})]),t._v(" "),e("p",[e("strong",[t._v("生命不息，折腾不止。")])]),t._v(" "),e("p",[t._v("经过近 2 年的摸索，从高中的 Dev C++ 到大一开学时的 Codeblock 与 Sublime Text，到现如今的 Atom，我想总结一下：**一个高效美观、能激发一个人创作欲望的代码编写环境到底是怎样配置出来的。**以拯救那些大一刚刚开学，即将或是已经被 C 语言 / Dev C++ / VC 6.0 荼毒半年有余的同学们。")]),t._v(" "),e("br"),t._v(" "),e("h1",{attrs:{id:"壹-→-atom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#壹-→-atom","aria-hidden":"true"}},[t._v("#")]),t._v(" 壹 → Atom")]),t._v(" "),e("p",[e("strong",[t._v("Atom：A hackable text editor for the 21st Century")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.loli.net/2018/03/11/5aa51fd0641a8.jpg",alt:""}})]),t._v(" "),e("p",[t._v("首先，介绍工具："),e("strong",[t._v("Atom 文本编辑器")]),t._v("，由 Github 出品的基于 Electron / Node.js 的半开源文本编辑器。官网位于 -> https://atom.io/")]),t._v(" "),e("p",[t._v("为什么我从一众优秀的文本编辑器中选择了 Atom，而不是 Vim，又放弃了我用了一年多的 Sublime Text？")]),t._v(" "),e("ul",[e("li",[t._v("**开源。**GitHub 上的大佬叫他是 Hackable 就不是吹的，配置文件是 "),e("code",[t._v("cson")]),t._v("，样式文件是 "),e("code",[t._v("CSS")]),t._v(" 和 "),e("code",[t._v("Less")]),t._v("，所以理论上你可以把 Atom 配置成任何你想要的样子。")]),t._v(" "),e("li",[t._v("**开箱即用。**所谓的 Out-Of-The-Box Experience 说的就是 Atom。自带 4 组 UI 主题、4 组 Syntax 主题，自带 Markdown 渲染器、代码美化插件等等。")]),t._v(" "),e("li",[t._v("**简单设置自带图形界面。**无疑对我们这些 "),e("code",[t._v("Spicy Chicken")]),t._v(" 很用户友好了，一些简单的设置是直接用下拉菜单的形式配置的，不需要打开诸如 "),e("code",[t._v("vimrc")]),t._v(" 和 "),e("code",[t._v("User.sublime-settings")]),t._v(" 然后费尽心思的直接改代码。")])]),t._v(" "),e("p",[t._v("又为什么我选择了 Atom 而不是 IDE？")]),t._v(" "),e("p",[t._v("我只能说，就我们这些 "),e("code",[t._v("Spicy Chicken")]),t._v(" 来说，写的代码还轮不到 IDE 的事情，毕竟刚开始的我们，C / C++ 一个项目不超过两个文件，一个文件不超过 500 行代码，用 IDE 来 "),e("code",[t._v("cmake")]),t._v(" 一波岂不是很亏。因此我在 IDE 和轻量级可拓展的文本编辑器中选择了后者，又在文本编辑器中选择了半开源、可 Hack 的 Atom。"),e("strong",[t._v("以上。")])]),t._v(" "),e("br"),t._v(" "),e("h1",{attrs:{id:"贰-→-配置-atom-成为写-c-c-的「ide」"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#贰-→-配置-atom-成为写-c-c-的「ide」","aria-hidden":"true"}},[t._v("#")]),t._v(" 贰 → 配置 Atom 成为写 C/C++ 的「IDE」")]),t._v(" "),e("p",[t._v("文本编辑器的最大的优势在于你可以通过开源社区下载，甚至自己编译开发「插件 - Plugin」来完善它，实现「开箱即用」中所没有提供的功能。")]),t._v(" "),e("h2",{attrs:{id:"_1-写代码的时候"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-写代码的时候","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. 写代码的时候")]),t._v(" "),e("p",[t._v("一个有情怀的 IDE 基本都会实现"),e("strong",[t._v("代码自动补全")]),t._v("，"),e("strong",[t._v("代码实时编译纠错")]),t._v("，以及"),e("strong",[t._v("代码高亮")]),t._v("（为了美丽）和**代码自动整理。**很可惜，Dev C++ 没有，Codeblock 也没有。因此，我们要完善我们崭新的 Atom 来实现以上功能。")]),t._v(" "),e("h3",{attrs:{id:"代码自动补全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码自动补全","aria-hidden":"true"}},[t._v("#")]),t._v(" 代码自动补全")]),t._v(" "),e("p",[e("strong",[t._v("Plugin:")]),t._v(" autocomplete-clang")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.loli.net/2018/03/11/5aa52f724ffec.jpg",alt:""}})]),t._v(" "),e("h3",{attrs:{id:"代码实时编译"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码实时编译","aria-hidden":"true"}},[t._v("#")]),t._v(" 代码实时编译")]),t._v(" "),e("p",[e("strong",[t._v("Plugins:")]),t._v(" linter, linter-clang, linter-ui-default")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.loli.net/2018/03/11/5aa52fa12a4ec.jpg",alt:""}})]),t._v(" "),e("h3",{attrs:{id:"代码高亮"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码高亮","aria-hidden":"true"}},[t._v("#")]),t._v(" 代码高亮")]),t._v(" "),e("p",[e("strong",[t._v("Themes")]),t._v("，这里的问题主要在于个人审美，我相信一定有一个美丽的 UI 和配套的 Syntax 主题打动你。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.loli.net/2018/03/11/5aa52fc316d12.jpg",alt:""}})]),t._v(" "),e("h3",{attrs:{id:"代码自动整理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码自动整理","aria-hidden":"true"}},[t._v("#")]),t._v(" 代码自动整理")]),t._v(" "),e("p",[e("strong",[t._v("Plugin:")]),t._v(" Atom-beautify")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.loli.net/2018/03/11/5aa52ff2cb70f.jpg",alt:""}})]),t._v(" "),e("br"),t._v(" "),e("h2",{attrs:{id:"_2-写完代码之后"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-写完代码之后","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 写完代码之后")]),t._v(" "),e("p",[t._v("一个能正常操作的 IDE 都能通过，或是绿色箭头，或是组合键 "),e("code",[t._v("Fn + F5")]),t._v(" 之类的方式编译运行。")]),t._v(" "),e("p",[t._v("在 Atom 里我们也可以实现：")]),t._v(" "),e("h3",{attrs:{id:"编译运行-c-c"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编译运行-c-c","aria-hidden":"true"}},[t._v("#")]),t._v(" 编译运行 C/C++")]),t._v(" "),e("h4",{attrs:{id:"一键编译：script"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一键编译：script","aria-hidden":"true"}},[t._v("#")]),t._v(" 一键编译：script")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.loli.net/2018/03/11/5aa53170e2991.jpg",alt:""}})]),t._v(" "),e("p",[t._v("插件 script 实际上是通过识别文件类型来执行对应的命令编译源代码。比如 C++ 的编译命令实际上是 "),e("code",[t._v("[Command: bash -c 'xcrun clang++ -std=c++14 -Wall -include stdio.h -fcolor-diagnostics -include iostream '$Path_To_CPP_File$/Test.cpp' -o /tmp/cpp.out && /tmp/cpp.out']")]),t._v("，通过快捷键 "),e("code",[t._v("⌘ + I")]),t._v(" 直接运行指令来编译。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.loli.net/2018/03/11/5aa533942bab0.jpg",alt:""}})]),t._v(" "),e("h4",{attrs:{id:"调出终端：platform-ide-terminal"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#调出终端：platform-ide-terminal","aria-hidden":"true"}},[t._v("#")]),t._v(" 调出终端：platform-ide-terminal")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.loli.net/2018/03/11/5aa531cb9e7b8.jpg",alt:""}})]),t._v(" "),e("p",[t._v("如果不满意 script 一键编译运行的话，可以通过这个插件唤出终端，这样直接了当用 "),e("code",[t._v("g++ -o $File_Name$ $File_Name.cpp$")]),t._v(" 这一命令来运行，这时候程序也支持输入，与 Windows 下 Dev C++ 中默认运行调出 Command Prompt 小黑框一般道理。同时这样也方便用 "),e("code",[t._v("gdb")]),t._v(" 来进行调试。")]),t._v(" "),e("br"),t._v(" "),e("h2",{attrs:{id:"_3-一个有情怀的工作流开发者的加成"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-一个有情怀的工作流开发者的加成","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. 一个有情怀的工作流开发者的加成")]),t._v(" "),e("p",[t._v("在 ACM 中，每段代码都是有标准输入和标准输出的。在 C / C++ 中我们可以通过这样的代码片段来读取输入："),e("code",[t._v("in.txt")]),t._v(" 并将程序输出、程序运行时间写入文件："),e("code",[t._v("out.txt")]),t._v("。在保证 C / C++ 源代码和两个 TXT 文件再同一个文件目录下，这段代码是这样的：")]),t._v(" "),e("div",{staticClass:"language-C++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('#ifdef SUBMIT\nfreopen("in.txt", "r", stdin);\nfreopen("out.txt", "w", stdout);\nlong _begin_time = clock();\n#endif\n\n/* your code here */\n\n#ifdef SUBMIT\nlong _end_time = clock();\nprintf("time = %ld ms", _end_time - _begin_time);\n#endif\n')])])]),e("p",[t._v("同时要在头文件定义时加入：")]),t._v(" "),e("div",{staticClass:"language-C++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("#define SUBMIT //本地运行这行留下，提交代码直接注释掉\n")])])]),e("p",[t._v("这样在 Atom 中就可以形成工作流：代码区域 - 编写 → 输入内容 "),e("code",[t._v("in.txt")]),t._v(" → 编译代码 → 查看输出文件内容、运行时间 "),e("code",[t._v("out.txt")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.loli.net/2018/03/11/5aa5377418b17.jpg",alt:""}})]),t._v(" "),e("p",[e("strong",[t._v("直观纯粹，效率优先。")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.loli.net/2018/03/11/5aa53879150d8.jpg",alt:""}})]),t._v(" "),e("p",[t._v("最后，上成果。这样的 Atom 配置在写 C / C++ 基础程序的时候，基本实现了：")]),t._v(" "),e("ul",[e("li",[t._v("Linter: 基于 clang 的实时编译")]),t._v(" "),e("li",[t._v("代码高亮与自动补全")]),t._v(" "),e("li",[t._v("代码自动优化美化")]),t._v(" "),e("li",[t._v("一键编译运行")]),t._v(" "),e("li",[t._v("终端调试")])]),t._v(" "),e("p",[t._v("我相信，这样的配置不仅完美的适合小型项目的编写，还能极大的提升对代码的敏感和热爱。至少，这种解决方式，比 Dev C++ 和 VC 6.0 体面，也比 Visual Studio 和 CLion 纯粹、轻量。")]),t._v(" "),e("p",[t._v("感谢阅读。")]),t._v(" "),e("p",[t._v("鞠躬。")]),t._v(" "),e("br"),t._v(" "),e("br"),t._v(" "),e("p",[e("a",{attrs:{href:"https://spencerwoo.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("©Spencer Woo"),e("OutboundLink")],1)])])},[],!1,null,null,null);a.default=r.exports}}]);